'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="wemmersTrainingExamples")>  _
Partial Public Class TrainingExamplesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertMovie(instance As Movie)
    End Sub
  Partial Private Sub UpdateMovie(instance As Movie)
    End Sub
  Partial Private Sub DeleteMovie(instance As Movie)
    End Sub
  Partial Private Sub InsertProducer(instance As Producer)
    End Sub
  Partial Private Sub UpdateProducer(instance As Producer)
    End Sub
  Partial Private Sub DeleteProducer(instance As Producer)
    End Sub
  Partial Private Sub InsertDishe(instance As Dishe)
    End Sub
  Partial Private Sub UpdateDishe(instance As Dishe)
    End Sub
  Partial Private Sub DeleteDishe(instance As Dishe)
    End Sub
  Partial Private Sub InsertOrderItem(instance As OrderItem)
    End Sub
  Partial Private Sub UpdateOrderItem(instance As OrderItem)
    End Sub
  Partial Private Sub DeleteOrderItem(instance As OrderItem)
    End Sub
  Partial Private Sub InsertOrder(instance As [Order])
    End Sub
  Partial Private Sub UpdateOrder(instance As [Order])
    End Sub
  Partial Private Sub DeleteOrder(instance As [Order])
    End Sub
  Partial Private Sub InsertCustomer(instance As Customer)
    End Sub
  Partial Private Sub UpdateCustomer(instance As Customer)
    End Sub
  Partial Private Sub DeleteCustomer(instance As Customer)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.TestDatabase.My.MySettings.Default.wemmersTrainingExamplesConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Cities() As System.Data.Linq.Table(Of City)
		Get
			Return Me.GetTable(Of City)
		End Get
	End Property
	
	Public ReadOnly Property Movies() As System.Data.Linq.Table(Of Movie)
		Get
			Return Me.GetTable(Of Movie)
		End Get
	End Property
	
	Public ReadOnly Property Producers() As System.Data.Linq.Table(Of Producer)
		Get
			Return Me.GetTable(Of Producer)
		End Get
	End Property
	
	Public ReadOnly Property Dishes() As System.Data.Linq.Table(Of Dishe)
		Get
			Return Me.GetTable(Of Dishe)
		End Get
	End Property
	
	Public ReadOnly Property OrderItems() As System.Data.Linq.Table(Of OrderItem)
		Get
			Return Me.GetTable(Of OrderItem)
		End Get
	End Property
	
	Public ReadOnly Property Orders() As System.Data.Linq.Table(Of [Order])
		Get
			Return Me.GetTable(Of [Order])
		End Get
	End Property
	
	Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customer)
		Get
			Return Me.GetTable(Of Customer)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cities")>  _
Partial Public Class City
	
	Private _CityID As Integer
	
	Private _CityName As String
	
	Private _Country As String
	
	Private _Population As System.Nullable(Of Integer)
	
	Private _Year As System.Nullable(Of Integer)
	
	Private _ImageURL As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property CityID() As Integer
		Get
			Return Me._CityID
		End Get
		Set
			If ((Me._CityID = value)  _
						= false) Then
				Me._CityID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityName", DbType:="VarChar(100)")>  _
	Public Property CityName() As String
		Get
			Return Me._CityName
		End Get
		Set
			If (String.Equals(Me._CityName, value) = false) Then
				Me._CityName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="VarChar(100)")>  _
	Public Property Country() As String
		Get
			Return Me._Country
		End Get
		Set
			If (String.Equals(Me._Country, value) = false) Then
				Me._Country = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Population", DbType:="Int")>  _
	Public Property Population() As System.Nullable(Of Integer)
		Get
			Return Me._Population
		End Get
		Set
			If (Me._Population.Equals(value) = false) Then
				Me._Population = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Year", DbType:="Int")>  _
	Public Property Year() As System.Nullable(Of Integer)
		Get
			Return Me._Year
		End Get
		Set
			If (Me._Year.Equals(value) = false) Then
				Me._Year = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageURL", DbType:="VarChar(200)")>  _
	Public Property ImageURL() As String
		Get
			Return Me._ImageURL
		End Get
		Set
			If (String.Equals(Me._ImageURL, value) = false) Then
				Me._ImageURL = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Movies")>  _
Partial Public Class Movie
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MovieID As Integer
	
	Private _Title As String
	
	Private _Year As System.Nullable(Of Integer)
	
	Private _Duration As System.Nullable(Of Integer)
	
	Private _Genre As String
	
	Private _Rating As System.Nullable(Of Double)
	
	Private _ProducerID As System.Nullable(Of Integer)
	
	Private _Producer As EntityRef(Of Producer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMovieIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMovieIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnYearChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnYearChanged()
    End Sub
    Partial Private Sub OnDurationChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDurationChanged()
    End Sub
    Partial Private Sub OnGenreChanging(value As String)
    End Sub
    Partial Private Sub OnGenreChanged()
    End Sub
    Partial Private Sub OnRatingChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnRatingChanged()
    End Sub
    Partial Private Sub OnProducerIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProducerIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producer = CType(Nothing, EntityRef(Of Producer))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MovieID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property MovieID() As Integer
		Get
			Return Me._MovieID
		End Get
		Set
			If ((Me._MovieID = value)  _
						= false) Then
				Me.OnMovieIDChanging(value)
				Me.SendPropertyChanging
				Me._MovieID = value
				Me.SendPropertyChanged("MovieID")
				Me.OnMovieIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Year", DbType:="Int")>  _
	Public Property Year() As System.Nullable(Of Integer)
		Get
			Return Me._Year
		End Get
		Set
			If (Me._Year.Equals(value) = false) Then
				Me.OnYearChanging(value)
				Me.SendPropertyChanging
				Me._Year = value
				Me.SendPropertyChanged("Year")
				Me.OnYearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Duration", DbType:="Int")>  _
	Public Property Duration() As System.Nullable(Of Integer)
		Get
			Return Me._Duration
		End Get
		Set
			If (Me._Duration.Equals(value) = false) Then
				Me.OnDurationChanging(value)
				Me.SendPropertyChanging
				Me._Duration = value
				Me.SendPropertyChanged("Duration")
				Me.OnDurationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Genre", DbType:="VarChar(25)")>  _
	Public Property Genre() As String
		Get
			Return Me._Genre
		End Get
		Set
			If (String.Equals(Me._Genre, value) = false) Then
				Me.OnGenreChanging(value)
				Me.SendPropertyChanging
				Me._Genre = value
				Me.SendPropertyChanged("Genre")
				Me.OnGenreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rating", DbType:="Float")>  _
	Public Property Rating() As System.Nullable(Of Double)
		Get
			Return Me._Rating
		End Get
		Set
			If (Me._Rating.Equals(value) = false) Then
				Me.OnRatingChanging(value)
				Me.SendPropertyChanging
				Me._Rating = value
				Me.SendPropertyChanged("Rating")
				Me.OnRatingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProducerID", DbType:="Int")>  _
	Public Property ProducerID() As System.Nullable(Of Integer)
		Get
			Return Me._ProducerID
		End Get
		Set
			If (Me._ProducerID.Equals(value) = false) Then
				If Me._Producer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnProducerIDChanging(value)
				Me.SendPropertyChanging
				Me._ProducerID = value
				Me.SendPropertyChanged("ProducerID")
				Me.OnProducerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producer_Movie", Storage:="_Producer", ThisKey:="ProducerID", OtherKey:="ProducerID", IsForeignKey:=true)>  _
	Public Property Producer() As Producer
		Get
			Return Me._Producer.Entity
		End Get
		Set
			Dim previousValue As Producer = Me._Producer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producer.Entity = Nothing
					previousValue.Movies.Remove(Me)
				End If
				Me._Producer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Movies.Add(Me)
					Me._ProducerID = value.ProducerID
				Else
					Me._ProducerID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Producer")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="wemmersStudent.Producers")>  _
Partial Public Class Producer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProducerID As Integer
	
	Private _Name As String
	
	Private _Movies As EntitySet(Of Movie)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProducerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProducerIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Movies = New EntitySet(Of Movie)(AddressOf Me.attach_Movies, AddressOf Me.detach_Movies)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProducerID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ProducerID() As Integer
		Get
			Return Me._ProducerID
		End Get
		Set
			If ((Me._ProducerID = value)  _
						= false) Then
				Me.OnProducerIDChanging(value)
				Me.SendPropertyChanging
				Me._ProducerID = value
				Me.SendPropertyChanged("ProducerID")
				Me.OnProducerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producer_Movie", Storage:="_Movies", ThisKey:="ProducerID", OtherKey:="ProducerID")>  _
	Public Property Movies() As EntitySet(Of Movie)
		Get
			Return Me._Movies
		End Get
		Set
			Me._Movies.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Movies(ByVal entity As Movie)
		Me.SendPropertyChanging
		entity.Producer = Me
	End Sub
	
	Private Sub detach_Movies(ByVal entity As Movie)
		Me.SendPropertyChanging
		entity.Producer = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Dishes")>  _
Partial Public Class Dishe
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Description As String
	
	Private _Extra As String
	
	Private _Price As Decimal
	
	Private _Category As Char
	
	Private _OrderItems As EntitySet(Of OrderItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnExtraChanging(value As String)
    End Sub
    Partial Private Sub OnExtraChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnCategoryChanging(value As Char)
    End Sub
    Partial Private Sub OnCategoryChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OrderItems = New EntitySet(Of OrderItem)(AddressOf Me.attach_OrderItems, AddressOf Me.detach_OrderItems)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Extra", DbType:="VarChar(200)")>  _
	Public Property Extra() As String
		Get
			Return Me._Extra
		End Get
		Set
			If (String.Equals(Me._Extra, value) = false) Then
				Me.OnExtraChanging(value)
				Me.SendPropertyChanging
				Me._Extra = value
				Me.SendPropertyChanged("Extra")
				Me.OnExtraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Decimal(5,2) NOT NULL")>  _
	Public Property Price() As Decimal
		Get
			Return Me._Price
		End Get
		Set
			If ((Me._Price = value)  _
						= false) Then
				Me.OnPriceChanging(value)
				Me.SendPropertyChanging
				Me._Price = value
				Me.SendPropertyChanged("Price")
				Me.OnPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Category", DbType:="Char(1) NOT NULL")>  _
	Public Property Category() As Char
		Get
			Return Me._Category
		End Get
		Set
			If ((Me._Category = value)  _
						= false) Then
				Me.OnCategoryChanging(value)
				Me.SendPropertyChanging
				Me._Category = value
				Me.SendPropertyChanged("Category")
				Me.OnCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Dishe_OrderItem", Storage:="_OrderItems", ThisKey:="ID", OtherKey:="DishID")>  _
	Public Property OrderItems() As EntitySet(Of OrderItem)
		Get
			Return Me._OrderItems
		End Get
		Set
			Me._OrderItems.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_OrderItems(ByVal entity As OrderItem)
		Me.SendPropertyChanging
		entity.Dishe = Me
	End Sub
	
	Private Sub detach_OrderItems(ByVal entity As OrderItem)
		Me.SendPropertyChanging
		entity.Dishe = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OrderItems")>  _
Partial Public Class OrderItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _OrderID As Integer
	
	Private _DishID As Integer
	
	Private _Number As Integer
	
	Private _Dishe As EntityRef(Of Dishe)
	
	Private _Order As EntityRef(Of [Order])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnOrderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderIDChanged()
    End Sub
    Partial Private Sub OnDishIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDishIDChanged()
    End Sub
    Partial Private Sub OnNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Dishe = CType(Nothing, EntityRef(Of Dishe))
		Me._Order = CType(Nothing, EntityRef(Of [Order]))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", DbType:="Int NOT NULL")>  _
	Public Property OrderID() As Integer
		Get
			Return Me._OrderID
		End Get
		Set
			If ((Me._OrderID = value)  _
						= false) Then
				If Me._Order.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnOrderIDChanging(value)
				Me.SendPropertyChanging
				Me._OrderID = value
				Me.SendPropertyChanged("OrderID")
				Me.OnOrderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DishID", DbType:="Int NOT NULL")>  _
	Public Property DishID() As Integer
		Get
			Return Me._DishID
		End Get
		Set
			If ((Me._DishID = value)  _
						= false) Then
				If Me._Dishe.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDishIDChanging(value)
				Me.SendPropertyChanging
				Me._DishID = value
				Me.SendPropertyChanged("DishID")
				Me.OnDishIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Number", DbType:="Int NOT NULL")>  _
	Public Property Number() As Integer
		Get
			Return Me._Number
		End Get
		Set
			If ((Me._Number = value)  _
						= false) Then
				Me.OnNumberChanging(value)
				Me.SendPropertyChanging
				Me._Number = value
				Me.SendPropertyChanged("Number")
				Me.OnNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Dishe_OrderItem", Storage:="_Dishe", ThisKey:="DishID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Dishe() As Dishe
		Get
			Return Me._Dishe.Entity
		End Get
		Set
			Dim previousValue As Dishe = Me._Dishe.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Dishe.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Dishe.Entity = Nothing
					previousValue.OrderItems.Remove(Me)
				End If
				Me._Dishe.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OrderItems.Add(Me)
					Me._DishID = value.ID
				Else
					Me._DishID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Dishe")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_OrderItem", Storage:="_Order", ThisKey:="OrderID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property [Order]() As [Order]
		Get
			Return Me._Order.Entity
		End Get
		Set
			Dim previousValue As [Order] = Me._Order.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Order.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Order.Entity = Nothing
					previousValue.OrderItems.Remove(Me)
				End If
				Me._Order.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OrderItems.Add(Me)
					Me._OrderID = value.ID
				Else
					Me._OrderID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("[Order]")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Orders")>  _
Partial Public Class [Order]
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _CustomerID As System.Nullable(Of Integer)
	
	Private _OrderDate As Date
	
	Private _OrderItems As EntitySet(Of OrderItem)
	
	Private _Customer As EntityRef(Of Customer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCustomerIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCustomerIDChanged()
    End Sub
    Partial Private Sub OnOrderDateChanging(value As Date)
    End Sub
    Partial Private Sub OnOrderDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OrderItems = New EntitySet(Of OrderItem)(AddressOf Me.attach_OrderItems, AddressOf Me.detach_OrderItems)
		Me._Customer = CType(Nothing, EntityRef(Of Customer))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", DbType:="Int")>  _
	Public Property CustomerID() As System.Nullable(Of Integer)
		Get
			Return Me._CustomerID
		End Get
		Set
			If (Me._CustomerID.Equals(value) = false) Then
				If Me._Customer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCustomerIDChanging(value)
				Me.SendPropertyChanging
				Me._CustomerID = value
				Me.SendPropertyChanged("CustomerID")
				Me.OnCustomerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderDate", DbType:="DateTime NOT NULL")>  _
	Public Property OrderDate() As Date
		Get
			Return Me._OrderDate
		End Get
		Set
			If ((Me._OrderDate = value)  _
						= false) Then
				Me.OnOrderDateChanging(value)
				Me.SendPropertyChanging
				Me._OrderDate = value
				Me.SendPropertyChanged("OrderDate")
				Me.OnOrderDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_OrderItem", Storage:="_OrderItems", ThisKey:="ID", OtherKey:="OrderID")>  _
	Public Property OrderItems() As EntitySet(Of OrderItem)
		Get
			Return Me._OrderItems
		End Get
		Set
			Me._OrderItems.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Order", Storage:="_Customer", ThisKey:="CustomerID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Customer() As Customer
		Get
			Return Me._Customer.Entity
		End Get
		Set
			Dim previousValue As Customer = Me._Customer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Customer.Entity = Nothing
					previousValue.Orders.Remove(Me)
				End If
				Me._Customer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Orders.Add(Me)
					Me._CustomerID = value.ID
				Else
					Me._CustomerID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Customer")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_OrderItems(ByVal entity As OrderItem)
		Me.SendPropertyChanging
		entity.[Order] = Me
	End Sub
	
	Private Sub detach_OrderItems(ByVal entity As OrderItem)
		Me.SendPropertyChanging
		entity.[Order] = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Customers")>  _
Partial Public Class Customer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _CustomerName As String
	
	Private _CustomerGuid As System.Nullable(Of System.Guid)
	
	Private _RegisterDate As System.Nullable(Of Date)
	
	Private _AmountPaid As System.Nullable(Of Decimal)
	
	Private _Closed As System.Nullable(Of Boolean)
	
	Private _Orders As EntitySet(Of [Order])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCustomerNameChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerNameChanged()
    End Sub
    Partial Private Sub OnCustomerGuidChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnCustomerGuidChanged()
    End Sub
    Partial Private Sub OnRegisterDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRegisterDateChanged()
    End Sub
    Partial Private Sub OnAmountPaidChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountPaidChanged()
    End Sub
    Partial Private Sub OnClosedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnClosedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Orders = New EntitySet(Of [Order])(AddressOf Me.attach_Orders, AddressOf Me.detach_Orders)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="VarChar(30)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me.OnCustomerNameChanging(value)
				Me.SendPropertyChanging
				Me._CustomerName = value
				Me.SendPropertyChanged("CustomerName")
				Me.OnCustomerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerGuid", DbType:="UniqueIdentifier")>  _
	Public Property CustomerGuid() As System.Nullable(Of System.Guid)
		Get
			Return Me._CustomerGuid
		End Get
		Set
			If (Me._CustomerGuid.Equals(value) = false) Then
				Me.OnCustomerGuidChanging(value)
				Me.SendPropertyChanging
				Me._CustomerGuid = value
				Me.SendPropertyChanged("CustomerGuid")
				Me.OnCustomerGuidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegisterDate", DbType:="DateTime")>  _
	Public Property RegisterDate() As System.Nullable(Of Date)
		Get
			Return Me._RegisterDate
		End Get
		Set
			If (Me._RegisterDate.Equals(value) = false) Then
				Me.OnRegisterDateChanging(value)
				Me.SendPropertyChanging
				Me._RegisterDate = value
				Me.SendPropertyChanged("RegisterDate")
				Me.OnRegisterDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AmountPaid", DbType:="Money")>  _
	Public Property AmountPaid() As System.Nullable(Of Decimal)
		Get
			Return Me._AmountPaid
		End Get
		Set
			If (Me._AmountPaid.Equals(value) = false) Then
				Me.OnAmountPaidChanging(value)
				Me.SendPropertyChanging
				Me._AmountPaid = value
				Me.SendPropertyChanged("AmountPaid")
				Me.OnAmountPaidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Closed", DbType:="Bit")>  _
	Public Property Closed() As System.Nullable(Of Boolean)
		Get
			Return Me._Closed
		End Get
		Set
			If (Me._Closed.Equals(value) = false) Then
				Me.OnClosedChanging(value)
				Me.SendPropertyChanging
				Me._Closed = value
				Me.SendPropertyChanged("Closed")
				Me.OnClosedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Order", Storage:="_Orders", ThisKey:="ID", OtherKey:="CustomerID")>  _
	Public Property Orders() As EntitySet(Of [Order])
		Get
			Return Me._Orders
		End Get
		Set
			Me._Orders.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Orders(ByVal entity As [Order])
		Me.SendPropertyChanging
		entity.Customer = Me
	End Sub
	
	Private Sub detach_Orders(ByVal entity As [Order])
		Me.SendPropertyChanging
		entity.Customer = Nothing
	End Sub
End Class
